// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace AtlantaCodeCampMobile.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class TalkDTO
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("abstract")]
        public string Abstract { get; set; }

        [JsonProperty("prerequisites")]
        public string Prerequisites { get; set; }

        [JsonProperty("audience")]
        public Audience Audience { get; set; }

        [JsonProperty("category")]
        public Category Category { get; set; }

        [JsonProperty("level")]
        public Level Level { get; set; }

        [JsonProperty("approved")]
        public bool Approved { get; set; }

        [JsonProperty("room")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Room { get; set; }

        [JsonProperty("time")]
        public DateTimeOffset Time { get; set; }

        [JsonProperty("track")]
        public object Track { get; set; }

        [JsonProperty("presentationUrl")]
        public object PresentationUrl { get; set; }

        [JsonProperty("codeUrl")]
        public object CodeUrl { get; set; }

        [JsonProperty("speakerDeckUrl")]
        public object SpeakerDeckUrl { get; set; }

        [JsonProperty("speakerRateUrl")]
        public object SpeakerRateUrl { get; set; }

        [JsonProperty("favorite")]
        public bool Favorite { get; set; }

        [JsonProperty("speaker")]
        public Speaker Speaker { get; set; }

        [JsonProperty("votes")]
        public long Votes { get; set; }
    }

    public partial class Speaker
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("website")]
        public string Website { get; set; }

        [JsonProperty("twitter")]
        public string Twitter { get; set; }

        [JsonProperty("blog")]
        public string Blog { get; set; }

        [JsonProperty("bio")]
        public string Bio { get; set; }

        [JsonProperty("imageUrl")]
        public Uri ImageUrl { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("companyName")]
        public string CompanyName { get; set; }

        [JsonProperty("companyUrl")]
        public string CompanyUrl { get; set; }

        [JsonProperty("phoneNumber")]
        public string PhoneNumber { get; set; }

        [JsonProperty("tShirtSize")]
        public TShirtSize? TShirtSize { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("email")]
        public string Email { get; set; }

        [JsonProperty("speakerLink")]
        public string SpeakerLink { get; set; }

        [JsonProperty("talks")]
        public object Talks { get; set; }
    }

    public enum Audience { Anyone, Developers, ItProfessionals, Managers };

    public enum Category { CareerAdvancement, ClientDevelopment, CloudDevelopment, DatabaseDevelopment, DesignUiUx, GeneralDiscussion, ItTopics, ProfessionalDevelopment, WebDevelopment };

    public enum Level { Advanced, Beginner, Intermediate };

    public enum TShirtSize { Large, Medium, Small, The2X, The3X, The4X, The5X, Xl };

    public partial class TalkDTO
    {
        public static List<TalkDTO> FromJson(string json) => JsonConvert.DeserializeObject<List<TalkDTO>>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<TalkDTO> self) => JsonConvert.SerializeObject(self, Converter.Settings);
        public static string ToJson(this List<Speaker> self) => JsonConvert.SerializeObject(self, AtlantaCodeCampMobile.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                AudienceConverter.Singleton,
                CategoryConverter.Singleton,
                LevelConverter.Singleton,
                TShirtSizeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class AudienceConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Audience) || t == typeof(Audience?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Anyone":
                    return Audience.Anyone;
                case "Developers":
                    return Audience.Developers;
                case "IT Professionals":
                    return Audience.ItProfessionals;
                case "Managers":
                    return Audience.Managers;
            }
            throw new Exception("Cannot unmarshal type Audience");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Audience)untypedValue;
            switch (value)
            {
                case Audience.Anyone:
                    serializer.Serialize(writer, "Anyone");
                    return;
                case Audience.Developers:
                    serializer.Serialize(writer, "Developers");
                    return;
                case Audience.ItProfessionals:
                    serializer.Serialize(writer, "IT Professionals");
                    return;
                case Audience.Managers:
                    serializer.Serialize(writer, "Managers");
                    return;
            }
            throw new Exception("Cannot marshal type Audience");
        }

        public static readonly AudienceConverter Singleton = new AudienceConverter();
    }

    internal class CategoryConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Category) || t == typeof(Category?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Career Advancement":
                    return Category.CareerAdvancement;
                case "Client Development":
                    return Category.ClientDevelopment;
                case "Cloud Development":
                    return Category.CloudDevelopment;
                case "Database Development":
                    return Category.DatabaseDevelopment;
                case "Design UI/UX":
                    return Category.DesignUiUx;
                case "General Discussion":
                    return Category.GeneralDiscussion;
                case "IT Topics":
                    return Category.ItTopics;
                case "Professional Development":
                    return Category.ProfessionalDevelopment;
                case "Web Development":
                    return Category.WebDevelopment;
            }
            throw new Exception("Cannot unmarshal type Category");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Category)untypedValue;
            switch (value)
            {
                case Category.CareerAdvancement:
                    serializer.Serialize(writer, "Career Advancement");
                    return;
                case Category.ClientDevelopment:
                    serializer.Serialize(writer, "Client Development");
                    return;
                case Category.CloudDevelopment:
                    serializer.Serialize(writer, "Cloud Development");
                    return;
                case Category.DatabaseDevelopment:
                    serializer.Serialize(writer, "Database Development");
                    return;
                case Category.DesignUiUx:
                    serializer.Serialize(writer, "Design UI/UX");
                    return;
                case Category.GeneralDiscussion:
                    serializer.Serialize(writer, "General Discussion");
                    return;
                case Category.ItTopics:
                    serializer.Serialize(writer, "IT Topics");
                    return;
                case Category.ProfessionalDevelopment:
                    serializer.Serialize(writer, "Professional Development");
                    return;
                case Category.WebDevelopment:
                    serializer.Serialize(writer, "Web Development");
                    return;
            }
            throw new Exception("Cannot marshal type Category");
        }

        public static readonly CategoryConverter Singleton = new CategoryConverter();
    }

    internal class LevelConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Level) || t == typeof(Level?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Advanced":
                    return Level.Advanced;
                case "Beginner":
                    return Level.Beginner;
                case "Intermediate":
                    return Level.Intermediate;
            }
            throw new Exception("Cannot unmarshal type Level");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Level)untypedValue;
            switch (value)
            {
                case Level.Advanced:
                    serializer.Serialize(writer, "Advanced");
                    return;
                case Level.Beginner:
                    serializer.Serialize(writer, "Beginner");
                    return;
                case Level.Intermediate:
                    serializer.Serialize(writer, "Intermediate");
                    return;
            }
            throw new Exception("Cannot marshal type Level");
        }

        public static readonly LevelConverter Singleton = new LevelConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class TShirtSizeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TShirtSize) || t == typeof(TShirtSize?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "2X":
                    return TShirtSize.The2X;
                case "3X":
                    return TShirtSize.The3X;
                case "4X":
                    return TShirtSize.The4X;
                case "5X":
                    return TShirtSize.The5X;
                case "Large":
                    return TShirtSize.Large;
                case "Medium":
                    return TShirtSize.Medium;
                case "Small":
                    return TShirtSize.Small;
                case "XL":
                    return TShirtSize.Xl;
            }
            throw new Exception("Cannot unmarshal type TShirtSize");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TShirtSize)untypedValue;
            switch (value)
            {
                case TShirtSize.The2X:
                    serializer.Serialize(writer, "2X");
                    return;
                case TShirtSize.The3X:
                    serializer.Serialize(writer, "3X");
                    return;
                case TShirtSize.The4X:
                    serializer.Serialize(writer, "4X");
                    return;
                case TShirtSize.The5X:
                    serializer.Serialize(writer, "5X");
                    return;
                case TShirtSize.Large:
                    serializer.Serialize(writer, "Large");
                    return;
                case TShirtSize.Medium:
                    serializer.Serialize(writer, "Medium");
                    return;
                case TShirtSize.Small:
                    serializer.Serialize(writer, "Small");
                    return;
                case TShirtSize.Xl:
                    serializer.Serialize(writer, "XL");
                    return;
            }
            throw new Exception("Cannot marshal type TShirtSize");
        }

        public static readonly TShirtSizeConverter Singleton = new TShirtSizeConverter();
    }
}
